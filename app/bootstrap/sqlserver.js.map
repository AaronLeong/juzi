{
    "version": 3,
    "sources": [
        "../../src/bootstrap/sqlserver.js"
    ],
    "names": [
        "moment",
        "require",
        "Connection",
        "Request",
        "config",
        "userName",
        "password",
        "server",
        "options",
        "database",
        "connection",
        "global",
        "mssql",
        "sqlString",
        "Promise",
        "resolve",
        "reject",
        "rows",
        "console",
        "log",
        "on",
        "connected",
        "infoError",
        "end",
        "debug",
        "err",
        "exec",
        "sql",
        "toString",
        "request",
        "statementComplete",
        "columnMetadata",
        "row",
        "requestDone",
        "execSql",
        "rowCount",
        "more",
        "resData",
        "thisWeekData",
        "info",
        "number",
        "message",
        "columnsMetadata",
        "forEach",
        "column",
        "columns",
        "n",
        "metadata",
        "colName",
        "value"
    ],
    "mappings": "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",
    "file": "../../src/bootstrap/sqlserver.js",
    "sourcesContent": [
        "/**\n * Created by AaronLeong on 08/11/2016.\n */\n\"use strict\";\nvar moment = require('moment');\nlet Connection = require('tedious').Connection;\nlet Request = require('tedious').Request;\nlet config = {\n    // userName: 'sa',\n    // password: 'FINX-server',\n    userName: 'developer',\n    password: 'devel0per-user',\n    server:'202.115.75.13',\n    // server: '47.92.115.38',\n    // If you're on Windows Azure, you will need this:\n    options: {database: 'scswhg_new',}\n};\n\nvar connection = new Connection(config);\n\nglobal.mssql = function (sqlString) {\n    return new Promise(function (resolve, reject) {\n    \tvar rows={};\n\n\n\n        console.log('sqlString', sqlString)\n\n        connection.on('connect', connected);\n        connection.on('infoMessage', infoError);\n        connection.on('errorMessage', infoError);\n        connection.on('end', end);\n        connection.on('debug', debug);\n\n        function connected(err) {\n            if (err) {\n                console.log(err);\n                // process.exit(1);\n            }\n            if (err) {\n                reject(err);\n            }\n            exec(sqlString)\n        }\n\n        function exec(sql) {\n            sql = sql.toString();\n\n            var request = new Request(sql, statementComplete)\n            request.on('columnMetadata', columnMetadata);\n            request.on('row', row);\n            request.on('done', requestDone);\n\n            connection.execSql(request);\n        }\n\n        function requestDone(rowCount, more) {\n            console.log('requestDone', rowCount + ' rows', more);\n        }\n\n        function statementComplete(err, rowCount) {\n            if (err) {\n                console.log('Statement failed: ' + err);\n            } else {\n                console.log('statementComplete', rowCount + ' rows');\n\n                // callback({resData: resData})\n            }\n\n\n            if (err) {\n                reject(err);\n            } else {\n                resolve({resData: resData, thisWeekData: thisWeekData});\n            }\n\n        }\n\n        function end() {\n            console.log('Connection closed');\n            // process.exit(0);\n        }\n\n        function infoError(info) {\n            // if (info) {\n            //     reject(info);\n            // }\n            console.log('infoError', info.number + ' : ' + info.message);\n        }\n\n        function debug(message) {\n            // console.log('debug',message);\n        }\n\n        function columnMetadata(columnsMetadata) {\n            //console.log(columnMetadata);\n            columnsMetadata.forEach(function (column) {\n                //console.log(column);\n            });\n        }\n\n        function row(columns) {\n            rows[n]={};    \n            columns.forEach(function(column) {    \n                    rows[n][column.metadata.colName] = column.value;        //获取数据              \n            });    \n            n++; \n            \n        }\n\n    })\n}\n\n\n"
    ]
}